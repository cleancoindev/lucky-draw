{"version":3,"sources":["components/Utils/history.js","components/Utils/AlertModal.js","utils/config.js","utils/init.js","components/Header/index.js","components/Utils/SuccessModal.js","components/CreatePool/index.js","components/Utils/Loading.js","utils/time.js","components/HomePage/index.js","utils/precision.js","components/BuyTicket/index.js","components/DisplayTickets/index.js","components/ClaimPrize/index.js","components/ViewPool/index.js","components/TokenFaucet/index.js","App.js","index.js","assets/logo.png","assets/matic-logo.png","assets/ipfs-logo.png","assets/yes.png","assets/no.png","assets/metamask.png"],"names":["createHistory","require","createHashHistory","AlertModal","open","toggle","children","Modal","show","onHide","animation","Header","closeButton","Title","Body","Footer","Button","variant","onClick","config","poolFactoryAbi","poolFactoryAddress","tokenFaucetAbi","tokenFaucetAddress","initContract","a","window","web3","Web3","ethereum","enable","eth","getAccounts","userAddress","poolFactory","Contract","from","tokenFaucet","ethInitialized","on","location","reload","useState","errorModal","setErrorModal","isMetamaskInstalled","Navbar","collapseOnSelect","bg","Brand","href","Image","width","src","logo","Toggle","aria-controls","Nav","className","Link","style","cursor","maticLogo","metamask","SuccessModal","onConfirm","CreatePool","deploying","setDeploying","processing","setProcessing","poolTokenName","poolTokenSymbol","ticketPrice","drawInterval","tokenBuyDuration","ticketBuyToken","image","addPoolState","setAddPoolState","showMetamaskError","setShowMetamaskError","msg","successModal","setSuccessModal","name","address","tokens","ipfs","ipfsClient","host","port","protocol","handleCreatePool","tokenBaseUrl","deployImage","ipfsHash","methods","addDrawPool","send","_","catch","error","message","console","log","Promise","resolve","reader","FileReader","readAsArrayBuffer","onloadend","files","path","content","result","addAll","cid","string","useEffect","selectedAddress","marginTop","history","push","CardDeck","Card","Row","Col","paddingLeft","Form","Control","type","placeholder","onChange","e","target","value","required","step","marginBottom","DropdownButton","position","title","map","element","onSelect","event","key","Dropdown","Item","eventKey","URL","createObjectURL","height","marginLeft","ipfsLogo","Loading","color","currentUnixTime","Math","floor","Date","getTime","time","future","distance","Number","HomePage","dai","loanPools","setlLoanPools","loading","setLoading","noMetamsk","setNoMetamask","createSubArray","pools","chunks","length","splice","getPools","allPools","totalPools","call","poolCount","i","drawPool","DisplayCard","pool","count","textDecoration","to","poolAddress","baseTokenURI","poolStartTimestamp","ticketBuyDuration","fontSize","margin","k","Array","x","precision","add","decimals","String","Decimal","times","pow","remove","dividedBy","Participate","contractInstance","erc20Instance","buyToken","availableBalance","balanceNeeded","callback","approving","setApproving","handleParticipate","allowance","participate","approveToken","reject","buyTicket","approve","backgroundColor","paddingBottom","DisplayTickets","nftBalance","tickets","ticket","ticketNumber","isValid","yesLogo","noLogo","ClaimPrize","handleClaimPrize","getApproved","claimPrize","role","aria-label","paddingTop","ViewPool","useParams","nftToken","setErc20Instance","setContractInstance","totalTicket","drawCount","ticketBuyEndTime","nextDrawStartTime","poolResult","tokenBaseURI","isWinnerTicket","poolWinnerAddr","erc20Balance","state","setState","showBuyTicket","setShowBuyTicket","fetchContractData","createContractInstance","contract","erc20","poolStartTime","getNextDrawTimestamp","balanceOf","baseURI","getFinalResult","getPoolWinner","tokenOfOwnerByIndex","stillValidTicket","drawPoolAbi","erc20Abi","generateRandom","random","getTokenSymbol","isConnected","textAlign","fontWeight","rel","draw","TokenFaucet","status","forEach","token","alreadyClaimed","tokenAddress","claimTestTokens","App","routes","exact","then","ReactDOM","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.bcd4d233.chunk.js","sourcesContent":["const createHistory = require(\"history\").createHashHistory;\n\nexport default createHistory();\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function AlertModal({\n    open,\n    toggle,\n    children,\n}) {\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Opps!! Error...</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\"\n                    onClick={toggle}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import * as poolFactory from '../abis/poolFactory.json';\nimport * as tokenFaucet from '../abis/tokenFaucet.json';\n\nexport const config = {\n    poolFactoryAbi: poolFactory.default,\n    poolFactoryAddress: \"0x7a099ef5B76f188f1AA3419353ff8A7DA681e501\",\n    tokenFaucetAbi: tokenFaucet.default,\n    tokenFaucetAddress: \"0xAEE35ab44720c72170B0Fc479E3b10622785d340\",\n}\n","import Web3 from 'web3';\nimport { config } from './config';\n\n// Initialize contract & set global variables\nexport async function initContract() {\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n\n    window.userAddress = (\n        await window.web3.eth.getAccounts()\n    )[0];\n\n    window.poolFactory = new window.web3.eth.Contract(\n        config.poolFactoryAbi,\n        config.poolFactoryAddress,\n        { from: window.userAddress }\n    );\n\n    window.tokenFaucet = new window.web3.eth.Contract(\n        config.tokenFaucetAbi,\n        config.tokenFaucetAddress,\n        { from: window.userAddress }\n    );\n\n    window.ethInitialized = true;\n\n    window.ethereum.on('accountsChanged', () => {\n        window.location.reload();\n    });\n}\n\n// export async function initLoggedIn() {\n//     const accounts = await window.ethereum\n//         .request({ method: 'eth_accounts' });\n\n//     if (\n//         typeof window.ethereum !== 'undefined'\n//         && accounts > 0\n//     ) {\n//         await initContract();\n//     }\n// }\n","import React, { useState } from \"react\";\nimport {\n    Nav,\n    Navbar,\n    Image,\n} from \"react-bootstrap\";\nimport logo from \"../../assets/logo.png\"\nimport metamask from \"../../assets/metamask.png\"\nimport maticLogo from \"../../assets/matic-logo.png\"\nimport AlertModal from \"../Utils/AlertModal\";\nimport { initContract } from \"../../utils/init\";\n\nexport default function Header() {\n    const [errorModal, setErrorModal] = useState(false);\n\n    const handleConnectMetamask = () => {\n        if (isMetamaskInstalled()) {\n            initContract();\n        } else {\n            setErrorModal(true);\n        }\n    };\n\n    const isMetamaskInstalled = () => {\n        return (typeof window.ethereum !== 'undefined');\n    }\n\n    return (\n        <div>\n            <Navbar collapseOnSelect bg=\"light\" variant=\"light\">\n                <Navbar.Brand href=\"#\">\n                    <Image width=\"60px\" src={logo} />\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#create-pool\">Create Pool</Nav.Link>\n                    <Nav.Link href=\"#token-faucet\">Token Faucet</Nav.Link>\n                </Nav>\n                <Nav>\n                    <Image\n                        style={{ cursor: \"pointer\" }}\n                        width=\"50px\"\n                        src={maticLogo}\n                        onClick={handleConnectMetamask}\n                    />\n                </Nav>\n            </Navbar>\n\n            <AlertModal\n                open={errorModal}\n                toggle={() => setErrorModal(false)}\n            >\n                You can't use these features without Metamask.\n                <br />\n                Please install\n                <Image width=\"50px\" src={metamask}></Image>\n                first !!\n            </AlertModal>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {\n    Button,\n    Modal,\n} from \"react-bootstrap\";\n\nexport default function SuccessModal({\n    open,\n    toggle,\n    children,\n    onConfirm,\n}) {\n    const handleClick = () => {\n        toggle();\n        onConfirm();\n    };\n\n    return (\n        <Modal\n            show={open}\n            onHide={toggle}\n            animation={false}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>Notification</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{children}</Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\"\n                    onClick={handleClick}\n                >\n                    Ok\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport ipfsClient from \"ipfs-http-client\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport metamask from \"../../assets/metamask.png\";\nimport ipfsLogo from \"../../assets/ipfs-logo.png\";\nimport history from \"../Utils/history\";\nimport {\n    Row,\n    Col,\n    Form,\n    Card,\n    Image,\n    Button,\n    CardDeck,\n    Dropdown,\n    DropdownButton,\n} from \"react-bootstrap\";\n\nexport default function CreatePool() {\n    const [deploying, setDeploying] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [addPoolState, setAddPoolState] = useState({\n        poolTokenName: \"\",\n        poolTokenSymbol: \"\",\n        ticketPrice: \"\",\n        drawInterval: \"\",\n        tokenBuyDuration: \"\",\n        ticketBuyToken: \"0x5A01Ea01Ba9A8DC2B066714A65E61a78838B1b9e\",\n        image: null,\n    });\n\n    const [showMetamaskError, setShowMetamaskError] = useState(\n        false\n    );\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [tokens] = useState([\n        { name: \"DAI\", address: \"0x5A01Ea01Ba9A8DC2B066714A65E61a78838B1b9e\" },\n        { name: \"USDC\", address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\" }\n    ]);\n\n    const ipfs = ipfsClient({\n        host: 'ipfs.infura.io',\n        port: 5001,\n        protocol: 'https',\n    });\n\n    const handleCreatePool = async () => {\n        let tokenBaseUrl = \"\";\n        if (addPoolState.image) {\n            setDeploying(true);\n            const ipfsHash = await deployImage();\n            tokenBaseUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n            setDeploying(false);\n        }\n\n        window.poolFactory.methods\n            .addDrawPool(\n                addPoolState.poolTokenName,\n                addPoolState.poolTokenSymbol,\n                addPoolState.ticketBuyToken,\n                addPoolState.ticketPrice,\n                addPoolState.drawInterval,\n                addPoolState.tokenBuyDuration,\n                tokenBaseUrl,\n            )\n            .send()\n            .on('transactionHash', () => {\n                setProcessing(true);\n            })\n            .on('receipt', (_) => {\n                setProcessing(false);\n                setSuccessModal({\n                    open: true,\n                    msg: \"Congratulations 🎉 !! \" +\n                        \"Pool successfully created !!\",\n                });\n            })\n            .catch((error) => {\n                setProcessing(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n                console.log(error.message)\n            });\n    };\n\n    const deployImage = () => {\n        return new Promise((resolve) => {\n            const reader = new window.FileReader()\n            reader.readAsArrayBuffer(addPoolState.image);\n\n            reader.onloadend = async () => {\n                const files = [{\n                    path: addPoolState.image.name,\n                    content: reader.result\n                }];\n\n                for await (const result of ipfs.addAll(files)) {\n                    resolve(result.cid.string);\n                }\n            }\n        });\n    }\n\n    useEffect(() => {\n        if (typeof window.ethereum === 'undefined' ||\n            !window.ethereum.selectedAddress\n        ) {\n            setShowMetamaskError(true);\n        }\n    }, []);\n\n    return (\n        <div style={{ marginTop: \"5%\" }}>\n            {showMetamaskError ?\n                <AlertModal\n                    open={showMetamaskError}\n                    toggle={() => {\n                        setShowMetamaskError(false);\n                        history.push('/');\n                    }}\n                >\n                    <div>\n                        {typeof window.ethereum === 'undefined' ?\n                            <div>\n                                You can't use these features without Metamask.\n                                <br />\n                                Please install\n                                <Image width=\"50px\" src={metamask}></Image>\n                                first !!\n                            </div>\n                            :\n                            <div>\n                                Please connect to\n                                <Image width=\"50px\" src={metamask}></Image>\n                                to use this feature !!\n                            </div>\n                        }\n                    </div>\n                </AlertModal>\n                :\n                <CardDeck>\n                    <Card className=\"hidden-card\"></Card>\n\n                    <Card className=\"mx-auto create-card\">\n                        <Card.Header>\n                            <u>Create Draw Pool</u>\n                        </Card.Header>\n\n                        <Card.Body>\n                            <Row style={{ marginTop: \"10px\" }}>\n                                <Col className=\"text-header\">\n                                    Pool Token Name:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"text\"\n                                        placeholder=\"NFT Token Name\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            poolTokenName: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.poolTokenName}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Pool Token Symbol:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"text\"\n                                        placeholder=\"NFT Token Symbol\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            poolTokenSymbol: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.poolTokenSymbol}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Ticket Price:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"Price of the ticket\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            ticketPrice: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.ticketPrice}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Every Draw Interval:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"In minutes (Eg. 15)\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            drawInterval: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.drawInterval}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    Buy Duration:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"number\"\n                                        step=\"0\"\n                                        placeholder=\"In minutes (Eg. 30)\"\n                                        onChange={(e) => setAddPoolState({\n                                            ...addPoolState,\n                                            tokenBuyDuration: e.target.value\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        value={addPoolState.tokenBuyDuration}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            <Row style={{ marginBottom: \"30px\" }}>\n                                <Col className=\"text-header\">\n                                    Token For Buy:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <DropdownButton\n                                        style={{\n                                            position: \"absolute\",\n                                        }}\n                                        title={tokens.map((element) => (\n                                            addPoolState.ticketBuyToken === element.address ?\n                                                element.name\n                                                : null\n                                        ))}\n                                        variant=\"outline-info\"\n                                        onSelect={(event) => setAddPoolState({\n                                            ...addPoolState,\n                                            ticketBuyToken: event\n                                        })}\n                                    >\n                                        {tokens.map((element, key) => (\n                                            <Dropdown.Item\n                                                key={key}\n                                                eventKey={element.address}\n                                            >\n                                                {element.name}\n                                            </Dropdown.Item>\n                                        ))}\n                                    </DropdownButton>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col className=\"text-header\">\n                                    NFT Token Image:\n                                </Col>\n                                <Col style={{ paddingLeft: \"0px\" }}>\n                                    <Form.Control\n                                        className=\"mb-4\"\n                                        type=\"file\"\n                                        onChange={(event) => setAddPoolState({\n                                            ...addPoolState,\n                                            image: event.target.files[0]\n                                        })}\n                                        style={{ width: \"80%\" }}\n                                        required\n                                    />\n                                </Col>\n                            </Row>\n\n                            {addPoolState.image ?\n                                <Row>\n                                    <Col>\n                                        <Image\n                                            src={URL.createObjectURL(\n                                                addPoolState.image\n                                            )}\n                                            width=\"150\"\n                                            height=\"150\">\n                                        </Image>\n                                    </Col>\n                                </Row>\n                                : null\n                            }\n                        </Card.Body>\n\n                        <Card.Footer className=\"text-center\">\n                            <Button\n                                onClick={handleCreatePool}\n                                variant=\"outline-success\"\n                            >\n                                {deploying ?\n                                    <div className=\"d-flex align-items-center\">\n                                        <span>Deploying to </span>\n                                        <Image\n                                            style={{ marginLeft: \"5px\" }}\n                                            src={ipfsLogo}\n                                            width=\"25px\"\n                                        ></Image>\n                                        <span className=\"loading ml-2\"></span>\n                                    </div>\n                                    :\n                                    (processing ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Processing\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        <div>Submit</div>\n                                    )\n                                }\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n\n                    <Card className=\"hidden-card\"></Card>\n                </CardDeck>\n            }\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={() => history.push(\"/\")}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport ReactLoading from \"react-loading\";\n\nexport default function Loading() {\n    return (\n        <div\n            className=\"d-flex justify-content-center mt-5 g-pt-90\"\n            style={{ height: \"-webkit-fill-available\"}}\n        >\n            <ReactLoading\n                type={\"spin\"}\n                color={\"#343a40\"}\n                height={\"6%\"}\n                width={\"6%\"}\n            />\n        </div>\n    );\n}\n","const currentUnixTime = () => {\n    return Math.floor((new Date()).getTime() / 1000);\n}\n\nconst getTimeInString = (unixTimestamp) => {\n    const tempTime = new Date(unixTimestamp * 1000)\n        .toISOString()\n        .replace('Z', ' ')\n        .replace('T', ' ');\n\n    const index = tempTime.indexOf('.');\n\n    return tempTime.substring(0, index) + ' UTC';\n}\n\nconst getRemaingTime = (future) => {\n    \n    const distance = Number(future) - currentUnixTime();\n\n    const days = Math.floor(distance / (60 * 60 * 24));\n    const hours = Math.floor((distance % (60 * 60 * 24)) / (60 * 60));\n    const minutes = Math.floor((distance % (60 * 60)) / (60));\n    const seconds = Math.floor((distance % (60)));\n\n    return days + \"d \" + hours + \"h \" + minutes + \"m \" + seconds + \"s\";\n};\n\nexport const time = {\n    currentUnixTime,\n    getTimeInString,\n    getRemaingTime,\n};\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../Utils/Loading\";\nimport { Link } from 'react-router-dom';\nimport { Card, CardDeck, Image } from \"react-bootstrap\";\nimport { time } from \"../../utils/time\";\n\nexport default function HomePage() {\n    const dai = \"0x5A01Ea01Ba9A8DC2B066714A65E61a78838B1b9e\";\n    const [loanPools, setlLoanPools] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [noMetamsk, setNoMetamask] = useState(false);\n\n    const createSubArray = (pools) => {\n        let chunks = [];\n\n        while (pools.length > 4) {\n            chunks.push(pools.splice(0, 4));\n        }\n\n        if (pools.length > 0) {\n            chunks.push(pools);\n        }\n\n        setlLoanPools(chunks);\n        setLoading(false);\n    }\n\n    const getPools = async () => {\n        const allPools = [];\n        const poolCount = await window.poolFactory\n            .methods\n            .totalPools()\n            .call();\n\n        if (Number(poolCount) === 0) {\n            setLoading(false);\n        }\n\n        for (let i = poolCount - 1; i >= 0; i--) {\n            const drawPool = await window.poolFactory\n                .methods\n                .allPools(i)\n                .call();\n\n            allPools.push(drawPool);\n\n            if (i === 0) {\n                createSubArray(allPools);\n            }\n        }\n    }\n\n    const isMetamaskInstalled = () => {\n        return (typeof window.ethereum !== 'undefined');\n    }\n\n    useEffect(() => {\n        if (!isMetamaskInstalled()) {\n            setLoading(false);\n            setNoMetamask(true);\n        } else if (loanPools.length === 0) {\n            getPools();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    function DisplayCard({ pool, count }) {\n        return (\n            <Card key={count} className=\"display-pool-card\" >\n                <Link\n                    key={count}\n                    style={{ textDecoration: \"none\", color: \"black\" }}\n                    to={`/view/${pool.poolAddress}/${pool.poolTokenSymbol}/${pool.ticketBuyToken === dai ?\n                        \"DAI\" :\n                        \"USDC\"}`}\n                >\n                    <Card.Header style={{ marginBottom: \"5px\" }}>\n                        <Image src={pool.baseTokenURI} width=\"50px\"></Image>\n                        <span> {pool.poolTokenName} Pool</span>\n                    </Card.Header>\n\n                    <Card.Body>\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Ticket Price: {pool.ticketPrice}\n                            <span> {pool.ticketBuyToken === dai ?\n                                \"DAI\" :\n                                \"USDC\"}\n                            </span>\n                        </div>\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Draw Interval: Every {pool.drawInterval} minutes\n                        </div>\n                        <div style={{ marginBottom: \"5px\" }}>\n                            {time.currentUnixTime() < (\n                                Number(pool.poolStartTimestamp) +\n                                Number(pool.ticketBuyDuration) *\n                                60\n                            ) ?\n                                <div>\n                                    <span>Buy Close In: </span>\n                                    <span className=\"info-message\">\n                                        {time.getRemaingTime(\n                                            Number(pool.poolStartTimestamp) +\n                                            Number(pool.ticketBuyDuration) *\n                                            60\n                                        )}\n                                    </span>\n                                </div>\n                                :\n                                <span className=\"warning-message\">\n                                    Buy Period Already Over\n                                </span>\n                            }\n                        </div>\n                    </Card.Body>\n                </Link>\n            </Card>\n        );\n    }\n\n    if (loading) {\n        return <Loading />\n    };\n\n    return (\n        <div>\n            {!noMetamsk ?\n\n                (loanPools.map((element, key) => (\n                    element.length === 4 ?\n                        <CardDeck key={key} style={{ margin: \"2%\" }}>\n                            {element.map((pool, k) => (\n                                <DisplayCard key={k} pool={pool} count={k} />\n                            ))}\n                        </CardDeck>\n                        :\n                        <CardDeck key={key} style={{ margin: \"2%\" }}>\n                            {element.map((pool, k) => (\n                                <DisplayCard key={k} pool={pool} count={k} />\n                            ))}\n\n                            {[...Array(4 - element.length)].map((x, i) =>\n                                <Card\n                                    key={element.length + i + 1}\n                                    className=\"hidden-card\"\n                                >\n                                </Card>\n                            )}\n                        </CardDeck>\n                )))\n                : <div\n                    className=\"alert-message\"\n                    style={{ marginTop: \"20%\", fontSize: \"x-large\" }}\n                >\n                    You don't have metamask. Please install first !!\n                </div>\n            }\n        </div >\n    );\n}\n","import { Decimal } from \"decimal.js\";\n\nconst add = async (value, decimals) => {\n    return String(await new Decimal(value)\n        .times(new Decimal(10).pow(decimals)));\n}\n\nconst remove = async (value, decimals) => {\n    return Number(await new Decimal(value)\n        .dividedBy(new Decimal(10).pow(decimals)));\n}\n\nexport const precision = {\n    add,\n    remove,\n};\n","import React, { useState } from \"react\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport { precision } from \"../../utils/precision\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function Participate({\n    poolAddress,\n    contractInstance,\n    erc20Instance,\n    buyToken,\n    availableBalance,\n    balanceNeeded,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleParticipate = async () => {\n        try {\n            const decimals = Number(\n                await erc20Instance.methods.decimals()\n                    .call()\n            );\n\n            console.log(decimals)\n\n            const allowance = await precision.remove(\n                await erc20Instance.methods.allowance(\n                    window.userAddress,\n                    poolAddress,\n                ).call(),\n                decimals,\n            );\n\n            if (Number(allowance) >= Number(balanceNeeded)) {\n                participate();\n            } else {\n                const success = await approveToken(\n                    allowance,\n                    decimals,\n                );\n\n                if (success) {\n                    participate();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const participate = () => {\n        return new Promise((resolve, reject) => {\n            contractInstance.methods.buyTicket()\n                .send()\n                .on('transactionHash', () => {\n                    setProcessing(true);\n                })\n                .on('receipt', () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg: \"Congratulations 🎉 !! \" +\n                            \"You successfully bought ticket !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    }\n\n    const approveToken = (allowance, decimals) => {\n        return new Promise(async (resolve, reject) => {\n            erc20Instance.methods.approve\n                (\n                    poolAddress,\n                    await precision.add(\n                        Number(balanceNeeded) - Number(allowance),\n                        decimals,\n                    )\n                )\n                .send()\n                .on('transactionHash', () => {\n                    setApproving(true);\n                })\n                .on('receipt', () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                })\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto form-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Buy Ticket</u>\n                </Card.Header>\n\n                {Number(availableBalance) >= Number(balanceNeeded) ?\n                    <Card.Body>\n                        <div style={{ marginBottom: \"20px\", color: \"orange\" }}>\n                            You are about to buy a ticket in the pool.\n                            Please click submit button to confirm your buy.\n                        </div>\n\n                        <Row className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                            <Col>\n                                <u>Available Balance</u>\n                                <span> : </span>\n                                <span>{availableBalance} {buyToken}</span>\n                            </Col>\n                        </Row>\n\n                        <Row className=\"text-center\" style={{ paddingBottom: \"30px\" }}>\n                            <Col>\n                                <u>Balance Needed</u>\n                                <span> : </span>\n                                <span>{balanceNeeded} {buyToken}</span>\n                            </Col>\n                        </Row>\n\n                        <Row className=\"text-center\">\n                            <Col>\n                                <Button\n                                    onClick={handleParticipate}\n                                    variant=\"outline-success\"\n                                >\n                                    {approving ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Approving\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        (processing ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Processing\n                                        <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Submit</div>\n                                        )\n                                    }\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Card.Body>\n                    :\n                    <Card.Body>\n                        <div className=\"alert-message\">\n                            You don't have available balance.<br />\n                            Please get some {buyToken} using\n                            <a href=\"#token-faucet\"> Token Faucet </a>\n                             or Use different account.\n                        </div>\n                    </Card.Body>\n                }\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","import React from \"react\";\nimport yesLogo from \"../../assets/yes.png\";\nimport noLogo from \"../../assets/no.png\";\nimport { Row, Col, Card, Image } from \"react-bootstrap\";\n\nexport default function DisplayTickets({\n    nftBalance,\n    tickets,\n}) {\n    return (\n        <Card\n            className=\"mx-auto form-card text-center\"\n            style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n        >\n            <Card.Header>\n                <u>Your Tickets</u>\n            </Card.Header>\n\n            <Card.Body>\n                <div style={{ marginBottom: \"20px\", color: \"green\", fontSize: \"large\" }}>\n                    You have {nftBalance} Tickets\n                </div>\n\n                {tickets.map((ticket, key) => (\n                    <Row key={key} className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                        <Col>\n                            <u>Ticket Number</u>\n                            <span> : </span>\n                            <span>{ticket.ticketNumber}</span>\n                        </Col>\n                        <Col>\n                            <u>Still Valid</u>\n                            <span> : </span>\n                            <Image style={{ marginLeft: \"10%\" }} src={\n                                ticket.isValid ?\n                                    yesLogo :\n                                    noLogo\n                            } width=\"25px\"></Image>\n                        </Col>\n                    </Row>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n}\n","import React, { useState } from \"react\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function ClaimPrize({\n    poolAddress,\n    contractInstance,\n    ticketNumber,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleClaimPrize = async () => {\n        try {\n            const address = await contractInstance.methods\n                .getApproved(\n                    ticketNumber\n                ).call();\n\n            if (address === poolAddress) {\n                claimPrize();\n            } else {\n                const success = await approveToken();\n                if (success) {\n                    claimPrize();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const claimPrize = () => {\n        return new Promise(async (resolve, reject) => {\n            contractInstance.methods.claimPrize\n                (\n                    ticketNumber,\n                )\n                .send()\n                .on(\"transactionHash\", () => {\n                    setProcessing(true);\n                })\n                .on(\"receipt\", () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg: \"Congratulations 🎉 !! \" +\n                            \"You successfully claimed your prize !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    };\n\n    const approveToken = () => {\n        return new Promise(async (resolve, reject) => {\n            contractInstance.methods.approve\n                (\n                    poolAddress,\n                    ticketNumber,\n                )\n                .send()\n                .on(\"transactionHash\", () => {\n                    setApproving(true);\n                })\n                .on(\"receipt\", () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                });\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto form-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Claim Prize</u>\n                </Card.Header>\n\n                <Card.Body>\n                    <div>\n                        <div className=\"info-message\">\n                            Congratulations\n                            <span role=\"img\" aria-label=\"congratualation-emoji\"> 🎉</span><br />\n                            You have winner ticket. Please click below button to claim your prize.<br />\n                        </div>\n\n                        <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n                            <Col>\n                                <Button variant=\"success\" onClick={handleClaimPrize}>\n                                    {approving ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Approving\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        (processing ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Processing\n                                        <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Submit</div>\n                                        )\n                                    }\n                                </Button>\n                            </Col>\n                        </Row>\n                    </div>\n                </Card.Body>\n\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport history from \"../Utils/history\";\nimport Loading from \"../Utils/Loading\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport metamask from \"../../assets/metamask.png\";\nimport { precision } from \"../../utils/precision\";\nimport { time } from \"../../utils/time\";\nimport * as erc20Abi from \"../../abis/erc20Abi.json\"\nimport * as drawPoolAbi from \"../../abis/drawPool.json\";\nimport {\n    Card,\n    Row,\n    Col,\n    Image,\n    Button,\n    CardDeck\n} from \"react-bootstrap\";\nimport BuyTicket from \"../BuyTicket\";\nimport DisplayTickets from \"../DisplayTickets\";\nimport ClaimPrize from \"../ClaimPrize\";\n\nexport default function ViewPool() {\n    let routes;\n    const DAI = \"0x5A01Ea01Ba9A8DC2B066714A65E61a78838B1b9e\";\n    const USDC = \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\";\n    const { poolAddress, nftToken, buyToken } = useParams();\n    const [loading, setLoading] = useState(true);\n    const [processing, setProcessing] = useState(false);\n    let [erc20Instance, setErc20Instance] = useState();\n    let [contractInstance, setContractInstance] = useState();\n    const [state, setState] = useState({\n        totalTicket: 0,\n        ticketPrice: 0,\n        drawInterval: 0,\n        drawCount: 0,\n        poolStartTimestamp: 0,\n        ticketBuyEndTime: 0,\n        nextDrawStartTime: 0,\n        nftBalance: 0,\n        tickets: [],\n        poolResult: 0,\n        tokenBaseURI: \"\",\n        isWinnerTicket: false,\n        poolWinnerAddr: \"\",\n        erc20Balance: 0,\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [showBuyTicket, setShowBuyTicket] = useState(false);\n    const [showMetamaskError, setShowMetamaskError] = useState(false);\n\n    const fetchContractData = async () => {\n        try {\n            if (!loading) setLoading(true);\n\n            let result;\n            if (!contractInstance) {\n                result = await createContractInstance();\n            }\n\n            contractInstance = contractInstance ? contractInstance : result.contract;\n            erc20Instance = erc20Instance ? erc20Instance : result.erc20;\n\n            if (contractInstance) {\n                setShowBuyTicket(false);\n\n                const totalTicket = await contractInstance\n                    .methods.ticketNumber().call();\n\n                const ticketPrice = await contractInstance\n                    .methods.ticketPrice().call();\n\n                const drawInterval = await contractInstance\n                    .methods.drawInterval().call();\n\n                const drawCount = await contractInstance\n                    .methods.drawCount().call();\n\n                const poolStartTimestamp = await contractInstance\n                    .methods.poolStartTime().call();\n\n                const ticketBuyEndTime = await contractInstance\n                    .methods.ticketBuyEndTime().call();\n\n                const nextDrawStartTime = await contractInstance\n                    .methods.getNextDrawTimestamp().call();\n\n                const nftBalance = await contractInstance\n                    .methods.balanceOf(window.userAddress).call();\n\n                const tokenBaseURI = await contractInstance\n                    .methods.baseURI().call();\n\n                let poolResult = 0, poolWinnerAddr = \"\";\n                if (Number(drawCount) === Number(totalTicket) - 1 &&\n                    time.currentUnixTime() > Number(ticketBuyEndTime)\n                ) {\n                    poolResult = await contractInstance\n                        .methods.getFinalResult().call();\n\n                    poolWinnerAddr = await contractInstance\n                        .methods.getPoolWinner().call();\n                }\n\n                let tickets = [], isWinnerTicket = false;\n                for (let i = 0; i < nftBalance; i++) {\n                    const ticketNumber = await contractInstance\n                        .methods.tokenOfOwnerByIndex(\n                            window.userAddress, i\n                        ).call();\n\n                    const isValid = await contractInstance\n                        .methods.stillValidTicket(\n                            ticketNumber\n                        ).call();\n\n                    tickets.push({ ticketNumber, isValid });\n\n                    if (Number(poolResult) === Number(ticketNumber)) {\n                        isWinnerTicket = true;\n                    }\n                }\n\n                let erc20Balance = await precision.remove(\n                    await erc20Instance\n                        .methods.balanceOf(window.userAddress).call(),\n                    await erc20Instance\n                        .methods.decimals().call()\n                );\n\n                setState({\n                    totalTicket,\n                    ticketPrice,\n                    drawInterval,\n                    drawCount,\n                    poolStartTimestamp,\n                    ticketBuyEndTime,\n                    nextDrawStartTime,\n                    nftBalance,\n                    tickets,\n                    poolResult,\n                    tokenBaseURI,\n                    isWinnerTicket,\n                    poolWinnerAddr,\n                    erc20Balance,\n                });\n\n                setLoading(false);\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    };\n\n    const createContractInstance = () => {\n        return new Promise((resolve, reject) => {\n            try {\n                const contract = new window.web3.eth.Contract(\n                    drawPoolAbi.default,\n                    poolAddress,\n                    { from: window.userAddress }\n                );\n\n                const erc20 = new window.web3.eth.Contract(\n                    erc20Abi.default,\n                    buyToken === \"DAI\" ? DAI : USDC,\n                    { from: window.userAddress }\n                );\n\n                setErc20Instance(erc20);\n                setContractInstance(contract);\n                resolve({ contract, erc20 });\n            } catch (error) {\n                reject(error);\n            }\n        });\n    };\n\n    const handleDraw = () => {\n        contractInstance\n            .methods.draw(generateRandom())\n            .send()\n            .on(\"transactionHash\", () => {\n                setProcessing(true);\n            })\n            .on(\"receipt\", () => {\n                setProcessing(false);\n                fetchContractData();\n            })\n            .catch((error) => {\n                setProcessing(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n            });\n    };\n\n    const generateRandom = () => {\n        return Math.floor(Math.random() * 10 ** 15);\n    };\n\n    const getTokenSymbol = () => {\n        return buyToken === \"DAI\" ?\n            \"DAI\" :\n            \"USDC\";\n    };\n\n    useEffect(() => {\n        if (typeof window.ethereum === 'undefined' ||\n            !window.ethereum.isConnected() ||\n            !window.ethereum.selectedAddress\n        ) {\n            setLoading(false);\n            setShowMetamaskError(true);\n        }\n\n        if (typeof window.ethereum !== 'undefined' &&\n            window.ethereum.selectedAddress &&\n            window.ethereum.isConnected()\n        ) {\n            fetchContractData();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) {\n        routes = <Loading />;\n    } else {\n        routes = (\n            <div>\n                {showMetamaskError ?\n                    <AlertModal\n                        open={showMetamaskError}\n                        toggle={() => {\n                            setShowMetamaskError(false);\n                            history.push('/');\n                        }}\n                    >\n                        <div>\n                            {typeof window.ethereum === 'undefined' ?\n                                <div>\n                                    You can't use these features without Metamask.\n                                <br />\n                                Please install\n                                <Image width=\"50px\" src={metamask}></Image>\n                                first !!\n                            </div>\n                                :\n                                <div>\n                                    Please connect to\n                                <Image width=\"50px\" src={metamask}></Image>\n                                to use this feature !!\n                            </div>\n                            }\n                        </div>\n                    </AlertModal>\n                    :\n                    <CardDeck>\n                        <Card className=\"hidden-card\"></Card>\n\n                        <Card className=\"mx-auto view-pool-card\">\n                            <Card.Body style={{ textAlign: \"left\", fontWeight: \"bold\" }}>\n                                <p className=\"view-pool-header\">\n                                    <u>Lucky Draw Pool</u>\n                                </p>\n\n                                <Row style={{ paddingBottom: \"20px\" }}>\n                                    <Col>\n                                        <u>Total Tickets</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            {state.totalTicket}\n                                        </span>\n                                    </Col>\n\n                                    <Col>\n                                        <u>Ticket Price</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            <span>{state.ticketPrice} </span>\n                                            {getTokenSymbol()}\n                                        </span>\n                                    </Col>\n                                </Row>\n\n                                <Row style={{ paddingBottom: \"20px\" }}>\n                                    <Col>\n                                        <u>Draw Complete</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            {state.drawCount}\n                                        </span>\n                                    </Col>\n\n                                    <Col>\n                                        <u>NFT Token</u>\n                                        <span> :</span>\n                                        <span className=\"float-right\">\n                                            {state.tokenBaseURI !== \"\" ?\n                                                <a\n                                                    target=\"_blank\"\n                                                    href={state.tokenBaseURI}\n                                                    rel=\"noreferrer noopener\">\n                                                    {nftToken}\n                                                </a>\n                                                : <div>{nftToken}</div>\n                                            }\n                                        </span>\n                                    </Col>\n                                </Row>\n\n                                {Number(state.nextDrawStartTime) > time.currentUnixTime() ?\n                                    <Row className=\"text-center\">\n                                        <Col>\n                                            <u>Next Draw In</u>\n                                            <span> : </span>\n                                            <span>\n                                                {time.getRemaingTime(state.nextDrawStartTime)}\n                                            </span>\n                                        </Col>\n                                    </Row>\n                                    :\n                                    (Number(state.drawCount) === Number(state.totalTicket) - 1 &&\n                                        Number(state.drawCount) > 0 ?\n                                        <div>\n                                            <div className=\"auction-alert-message\">\n                                                Pool Already Closed\n                                            </div>\n                                            <div className=\"auction-info-message\">\n                                                Winner: {state.poolResult}\n                                            </div>\n                                        </div>\n                                        : null\n                                    )\n                                }\n\n                                {time.currentUnixTime() > Number(state.nextDrawStartTime) &&\n                                    Number(state.drawCount) < Number(state.totalTicket) - 1 ?\n                                    <Row className=\"text-center\">\n                                        <Col>\n                                            <Button variant=\"info\" onClick={handleDraw}>\n                                                {processing ?\n                                                    <div className=\"d-flex align-items-center\">\n                                                        Processing\n                                                    <span className=\"loading ml-2\"></span>\n                                                    </div>\n                                                    :\n                                                    <div>Execute Draw</div>\n                                                }\n                                            </Button>\n\n                                            <div className=\"info-message\">\n                                                You will get {Number(state.ticketPrice) / 100} {getTokenSymbol()}\n                                                <span> for executing this draw.</span>\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                    : null\n                                }\n\n                                {state.nftBalance > 0 ?\n                                    <DisplayTickets\n                                        nftBalance={state.nftBalance}\n                                        tickets={state.tickets}\n                                    />\n                                    : null\n                                }\n\n                                {showBuyTicket ?\n                                    <BuyTicket\n                                        poolAddress={poolAddress}\n                                        contractInstance={contractInstance}\n                                        erc20Instance={erc20Instance}\n                                        buyToken={buyToken === \"DAI\" ? \"DAI\" : \"USDC\"}\n                                        availableBalance={state.erc20Balance}\n                                        balanceNeeded={state.ticketPrice}\n                                        callback={fetchContractData}\n                                    />\n                                    : null\n                                }\n\n                                {Number(state.isWinnerTicket) !== 0 ?\n                                    <ClaimPrize\n                                        poolAddress={poolAddress}\n                                        contractInstance={contractInstance}\n                                        ticketNumber={state.poolResult}\n                                        callback={fetchContractData}\n                                    />\n                                    :\n                                    (Number(state.drawCount) === Number(state.totalTicket) - 1 &&\n                                        Number(state.drawCount) > 0 && Number(state.nftBalance) > 0 ?\n                                        (state.poolWinnerAddr === window.userAddress ?\n                                            <div className=\"info-message\">\n                                                Congratulations\n                                                <span\n                                                    role=\"img\"\n                                                    aria-label=\"congratualation-emoji\"\n                                                > 🎉</span><br />\n                                                You have already claimed your prize\n                                                 for ticket number {state.poolResult}<br />\n                                                Hope to see you in the other pools\n                                                <span role=\"img\" aria-label=\"smile-emoji\"> 🙂</span>\n                                            </div>\n                                            : null\n                                        ) : (Number(state.nftBalance) > 0 && Number(state.drawCount) > 0\n                                            && Number(state.drawCount) === Number(state.totalTicket) - 1 ?\n                                            <div className=\"info-message\">\n                                                You don't have winner ticket. <br /><br />\n\n                                                Thank you for your participation in the pool.<br />\n                                                Hope to see you in the other pools\n                                                <span role=\"img\" aria-label=\"smile-emoji\"> 🙂</span>\n                                            </div>\n                                            : null\n                                        )\n                                    )\n                                }\n                            </Card.Body>\n\n                            {time.currentUnixTime() < Number(state.ticketBuyEndTime) ?\n                                <Card.Footer className=\"view-pool-footer\">\n                                    <Button\n                                        onClick={() => setShowBuyTicket(true)}\n                                        variant=\"success\"\n                                    >\n                                        {state.nftBalance > 0 ?\n                                            <div>Buy More Ticket</div>\n                                            :\n                                            <div>Want to Buy Ticket ?</div>\n                                        }\n                                    </Button>\n                                </Card.Footer>\n                                :\n                                (Number(state.nftBalance) === 0 ?\n                                    <div className=\"alert-message\">\n                                        Participation time already over.<br />\n                                        Please check other Pools\n                                        <span role=\"img\" aria-label=\"smile-emoji\"> 🙂</span>\n                                    </div>\n                                    : <div style={{ marginBottom: \"20px\" }}></div>\n                                )\n                            }\n                        </Card>\n\n                        <Card className=\"hidden-card\"></Card>\n                    </CardDeck>\n                }\n\n                <AlertModal\n                    open={errorModal.open}\n                    toggle={() => setErrorModal({\n                        ...errorModal, open: false\n                    })}\n                >\n                    {errorModal.msg}\n                </AlertModal>\n\n                <SuccessModal\n                    open={successModal.open}\n                    toggle={() => setSuccessModal({\n                        ...successModal, open: false\n                    })}\n                >\n                    {successModal.msg}\n                </SuccessModal>\n            </div >\n        );\n    }\n\n    return routes;\n}\n","import React, { useEffect, useState } from \"react\";\nimport Loading from \"../Utils/Loading\";\nimport AlertModal from \"../Utils/AlertModal\";\nimport SuccessModal from \"../Utils/SuccessModal\";\nimport { Button, Card, CardDeck } from \"react-bootstrap\";\n\nexport default function TokenFaucet() {\n    const [loading, setLoading] = useState(true);\n    const [processing, setProcessing] = useState(false);\n\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [tokens] = useState([\n        {\n            name: \"DAI\",\n            address: \"0x5A01Ea01Ba9A8DC2B066714A65E61a78838B1b9e\",\n            status: false\n        }, {\n            name: \"USDC\",\n            address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\",\n            status: false\n        }\n    ]);\n\n    const handleGetTestTokens = (tokenAddress) => {\n        window.tokenFaucet.methods\n            .claimTestTokens(tokenAddress)\n            .send()\n            .on('transactionHash', () => {\n                setProcessing(true);\n            })\n            .on('receipt', (_) => {\n                setProcessing(false);\n            })\n            .catch((error) => {\n                setProcessing(false);\n                setErrorModal({\n                    open: true,\n                    msg: error.message,\n                });\n            });\n    }\n\n    const checkIsAlreadyClaimed = () => {\n        tokens.forEach(async (token, i) => {\n            const status = await window.tokenFaucet\n                .methods.alreadyClaimed(\n                    window.userAddress,\n                    token.address,\n                ).call();\n\n            tokens[i].status = status;\n\n            if (i === tokens.length - 1) {\n                setLoading(false);\n            }\n        });\n    }\n\n    useEffect(() => {\n        checkIsAlreadyClaimed();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (loading) {\n        return <Loading />\n    };\n\n    return (\n        <div>\n            <CardDeck>\n                <Card className=\"hidden-card\"></Card>\n\n                <Card className=\"view-pool-card\">\n                    <Card.Header>\n                        <u>Token Faucet</u>\n                    </Card.Header>\n\n                    <Card.Body>\n                        <div style={{ marginBottom: \"30px\" }}>\n                            <strong>Don't have MATIC Token ?</strong>\n                            <br />Please use <a\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                href=\"https://faucet.matic.network/\"\n                                style={{ fontWeight: \"bold\" }}\n                            > Matic Faucet </a>\n                            to get some token on {window.userAddress}\n                        </div>\n\n                        {tokens.map((token, key) => (\n                            <Card\n                                key={key}\n                                className=\"mx-auto form-card text-center\"\n                                style={{\n                                    backgroundColor: \"rgb(253, 255, 255)\",\n                                    marginTop: \"4%\",\n                                    marginBottom: \"4%\"\n                                }}\n                            >\n                                <Card.Header>\n                                    <u>{token.name} Faucet</u>\n                                </Card.Header>\n\n                                {!token.status ?\n                                    <Card.Body>\n                                        <p>\n                                            You can get 100 Test <strong>{token.name} </strong>\n                                            (one time) by clicking below button:\n                                            <br />\n                                        </p>\n\n                                        <Button\n                                            style={{ marginTop: '10px' }}\n                                            variant=\"success\"\n                                            onClick={() =>\n                                                handleGetTestTokens(token.address)\n                                            }\n                                        >\n                                            {processing ?\n                                                <div className=\"d-flex align-items-center\">\n                                                    Processing\n                                                <span className=\"loading ml-2\"></span>\n                                                </div>\n                                                :\n                                                <div>\n                                                    GET 100 {token.name}\n                                                </div>\n                                            }\n                                        </Button>\n                                    </Card.Body>\n\n                                    :\n                                    <Card.Body>\n                                        <p style={{ color: \"gray\" }}>\n                                            You have already claimed your 100 {token.name}.\n                                        </p>\n                                        <p style={{ marginTop: \"30px\", fontWeight: \"bold\" }}>\n                                            Maybe you need to use a different account?\n                                        </p>\n                                    </Card.Body>\n                                }\n                            </Card>\n                        ))}\n                    </Card.Body>\n                </Card>\n\n                <Card className=\"hidden-card\"></Card>\n            </CardDeck>\n\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n    Switch,\n    HashRouter,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport history from './components/Utils/history';\nimport Header from './components/Header';\nimport CreatePool from './components/CreatePool';\nimport HomePage from './components/HomePage';\nimport ViewPool from './components/ViewPool';\nimport TokenFaucet from './components/TokenFaucet';\n\nexport default function App() {\n    const routes = (\n        <Switch>\n            <Route path=\"/\" exact>\n                <HomePage />\n            </Route>\n            <Route path=\"/create-pool\" exact>\n                <CreatePool />\n            </Route>\n            <Route path=\"/view/:poolAddress/:nftToken/:buyToken\" exact>\n                <ViewPool />\n            </Route>\n            <Route path=\"/token-faucet\" exact>\n                <TokenFaucet />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n\n    return (\n        <div className=\"App\">\n            <HashRouter history={history}>\n                <Header />\n                {routes}\n            </HashRouter>\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { initContract } from './utils/init';\n\nif (\n    typeof window.ethereum !== 'undefined' &&\n    window.ethereum.selectedAddress &&\n    window.ethereum.isConnected()\n) {\n    initContract()\n        .then(() => {\n            ReactDOM.render(\n                <App />,\n                document.querySelector('#root')\n            )\n        })\n        .catch(console.error);\n} else if (typeof window.ethereum !== 'undefined') {\n    initContract()\n        .then(() => {\n            ReactDOM.render(\n                <App />,\n                document.querySelector('#root')\n            )\n        });\n} else {\n    ReactDOM.render(\n        <App />,\n        document.querySelector('#root')\n    )\n}\n","module.exports = __webpack_public_path__ + \"static/media/logo.48f8ceaf.png\";","module.exports = __webpack_public_path__ + \"static/media/matic-logo.5be09fdb.png\";","module.exports = __webpack_public_path__ + \"static/media/ipfs-logo.6afbd7b3.png\";","module.exports = __webpack_public_path__ + \"static/media/yes.e4ba3da3.png\";","module.exports = __webpack_public_path__ + \"static/media/no.bf5d695c.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.e9ada72b.png\";"],"sourceRoot":""}